:: CTF 10 {"position":"1300,425","size":"100,100"}
<link rel="stylesheet" href="src/css/ctf10/styles.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jquery.terminal/css/jquery.terminal.min.css"/>

(set: _info to "")

(if: $ctfs contains "ctf10")[]
(else:)[(alert: _info)]

(link-repeat: "What should I do?")[(alert: _info)]
<script src="https://cdnjs.cloudflare.com/ajax/libs/BrowserFS/2.0.0/browserfs.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.terminal/2.34.0/js/jquery.terminal.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/jquery.terminal.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/animation.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/less.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/pipe.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/unix_formatting.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/terminal.widget.js"></script>

<tw-consecutive-br></tw-consecutive-br>

<script>
//https://jvilk.com/browserfs/1.4.1/classes/_backend_localstorage_.localstoragefilesystem.html
BrowserFS.install(window);

// Write JavaScript here
//https://jvilk.com/browserfs/1.4.1/classes/_backend_localstorage_.localstoragefilesystem.html
BrowserFS.install(window);

// Write JavaScript here
BrowserFS.configure({
  fs: "LocalStorage", // from Backends table below,
  options: {
  }
}, function (e) {
  if (e) {
    // An error occurred.
    throw e;
  }
  // Otherwise, you can interact with the configured backends via our Node FS polyfill!
  var fs = BrowserFS.BFSRequire('fs');
  fs.readdir('/', function(e, contents) {
    // etc
    
  fs.writeFile('/test.txt', 'Cool, I can do this in the browser!', function(err) {});
    
  var current_dir = "/";
  
    function getCurrentDir(){
       if (!String(current_dir).endsWith('/')) {
          current_dir += "/";
        }
      return current_dir.toString();
    }
    
    function setDirDown(){
      if (current_dir == "/") {
        return current_dir;
      } else {
        // /home/marc/test
        dirs = getCurrentDir().slice(0, -1).split('/');
        terminal.echo("dirs: " + dirs);
        terminal.echo("current_dir: " + current_dir);
        dirs.pop();
        terminal.echo("dirs: " + dirs);
        current_dir = dirs.join('/');
        terminal.echo("current_dir: " + getCurrentDir());
      }
    }

    terminal = $('terminal').terminal((command) => {
      var cmd = $.terminal.parse_command(command);
      /*terminal.echo(command);*/
          if (commandList[cmd.name]) {
              commandList[cmd.name].call(terminal, cmd);
          } else if (cmd.name.length == 0) {
              return;
          } else {
              terminal.error('Command not found: ' + cmd.name);
         }
      }, {
      greetings: 'Your PC',
      name: 'js_demo',
      height: 500,
      width: 900,
      prompt: 'root@localhost:'+current_dir+'\$> '
  });
  
  var commandList = {
    help: function(cmd) {
      terminal.echo(Object.keys(commandList).reduce((accumulator, currentValue) => accumulator +"\n"+ currentValue, "Available commands:"));
    },
    qq: function(cmd) {commandList.call(terminal, help) },
    add: function(cmd) {
      terminal.echo(parseInt(cmd.args[0])+parseInt(cmd.args[1]));
    },

    sub: function(cmd) {
          terminal.echo(parseInt(cmd.args[0])-parseInt(cmd.args[1]));
    },
    cd: function(cmd) {
        if (cmd.args[0] == ".."){
          //Function go back or /
          //change promt
          setDirDown();
          terminal.set_prompt('root@localhost:'+getCurrentDir()+'\$>');
          return;
        } else if (cmd.args[0] == ".") {
          return;
        }
        //Check if dir exists
        if (!fs.existsSync(getCurrentDir()+cmd.args[0])) {
              terminal.echo("Not a directory");
        }
        current_dir = "/" + cmd.args[0];
        terminal.set_prompt('root@localhost:'+getCurrentDir()+'\$>');
    },
 
    ls: function(cmd) {
      /*ls <dir>*/
          fs.readdir(getCurrentDir(), function(err, contents) {
          terminal.echo(contents.toString().split(","));
        }); 
    },
    touch: function(cmd) {
        if (cmd.args.length != 1) {
        printHelp("touch");
        } else {
        fs.writeFile(cmd.args[0], '', function(err) {});
        }
    },
    pwd: function(cmd) {
        terminal.echo(getCurrentDir());
    },
    mkdir: function(cmd) {
      if (cmd.args.length != 1) {
        printHelp("mkdir");
      } else {
         fs.mkdir(cmd.args[0], function(err, contents) {}); 
      }
    },
    less: function(cmd) {
      if (cmd.args.length != 1) {
        printHelp("less");
      } else {
          //check if exsis
          if (!fs.existsSync(getCurrentDir()+cmd.args[0])) {
              terminal.echo("no such file or directory");
          }
          fs.readFile(cmd.args[0], function(err, contents) {
          terminal.echo(contents.toString());
        }); 
      }
    },
    startCTF:  function(cmd) {
      terminal.echo("Welcome to this reverse engineering CTF.");
      terminal.echo("Try to find the CTF and have fun!");
      terminal.echo("");
      terminal.set_prompt("");
      ctf();
    }
  }

  function printHelp(forCommand){
    switch (forCommand){
      case "mkdir":
        terminal.echo("Usage mkdir <foldername>");
        break;
       case "less":
        terminal.echo("Usage less <filename>");
        break;
       case "touch":
        terminal.echo("Usage touch <filename>");
        break;
        }
      }  
  
  function ctf(){
    var input = terminal.read('');
    terminal.echo(input);      
  }
  
  });
});
</script>
<terminal> </terminal>

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>

(link-repeat: "Give me a hint",(css:"padding:0px"))[(alert: "")]

<tw-consecutive-br></tw-consecutive-br>

(link-repeat: "Give me a second hint")[(alert: "")]

(Set: _solution to "<#script> alert(\"XSS\");</script>")
(if: $debug is true)[solution is: (click: "solution")[_solution]]
 
<a class="fixedButton1" href>
  <button class="addMore" title="don't focus on the image itself">reload</button>
</a>
 
<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>

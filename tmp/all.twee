:: StoryTitle
twine-ctf


:: StoryData
{
	"ifid": "DC4F9919-114F-42D0-AD6B-6D66F013AD8C",
	"format": "Harlowe",
	"format-version": "3.3.3",
	"start": "MainPage",
	"zoom": 1
}


:: Story Stylesheet [stylesheet]
/*Button redo undo*/
tw-icon{
     color: #ad00d8;
}


/**/
tw-story {
 background-image: url('img/4all/background_landscape.svg');
 background-size: 110%;

  /* Center and scale the image nicely */
  background-position: center;
  background-repeat: no-repeat;
}


/* Colors Fonts */

:root {
  --font_yellow: #F79E00;
  --font_grey: #9B9B9B;
}

/* Colors Background */
:root {
  --purple: #B200DD;
  --purple_dark: #4B0872;
  --blue: #4316A5;
  --blue_dark: #250777;
  --grey1: #1E1E1E;
  --grey2: #161616;
  --grey3: #141414;
}

/* TODO override Button and Texts*/


:: Story JavaScript [script]
window.setup = window.setup || {};

/* # CTF 1 Start */

setup.ctf1 = function() {
	   document.getElementById("ssss").addEventListener("click", eventOnClickHandler);

}

function eventOnClickHandler(event) {
	var user = btoa(document.getElementById("user").value.replace(/=/g, ""));
    var pass = btoa(document.getElementById("password").value.replace(/=/g, ""));

  	return "d3d3LWFkbWlu" !== user ? alert("Incorrect Username or Password") : "a2V5TWVtb3J5KHN1cGVyU2VjcmV0cGFzc3cwcmQxMjMp" !== pass ? alert("Incorrect Username or Password") : void alert(`Correct Username and Password! \nYour flag is ${atob(pass)}.`)
  
}

/* # CTF 1 End */



/* Global Start */

window.addEventListener("message", function(event) {
  if (event.data == "js_inserted_ctf4") {
    ctf4_updateURI(event.data);
    ctf4_levelSucceed();
    return;
  }
  
  if (event.data == "js_inserted_ctf5") {
    ctf5_updateURI(event.data);
    ctf5_levelSucceed();
    return;
  }


}, false);

/* Global End */


/* # CTF 4 Start */


setup.ctf4_updateFrame = function (frameNum, url) {
  if (!url) {
  	var urlbar = document.getElementById('input'); 
  	var url = urlbar.value;
  };
    
  // Make sure that the URL points to the frame of the current level
  var frameLink = document.createElement('a');
  frameLink.href = url;

  if (!url.startsWith('https://twine.ctf/ctf4.html') || !url.endsWith) {
       alert("Sorry, I can't open this URL in a frame.");
    	urlbar.value = "https://twine.ctf/ctf4.html";
        var frame = document.querySelector('iframe');
        frame.src = "static/ctf4/s.html"; 
   		//frame.contentWindow.postMessage(url, "*");
       return
  } else {
    var arg = url.replace("https://twine.ctf/ctf4.html", "");
    var frame = document.querySelector('iframe');
    frame.src = "static/ctf4/s.html" + arg; 
    //frame.contentWindow.postMessage(url, "*");
  }

};


function ctf4_updateURI(value) {
  var urlbar = document.getElementById('input');
  urlbar.value = "https://twine.ctf/ctf4.html";
}

function ctf4_levelSucceed() {
	alert("XSS Success");
  	Harlowe.goto("CTF4_end");
}


/* # CTF 4 End */



/* # CTF 5 Start */


setup.ctf5_updateFrame = function (frameNum, url) { 
  if (!url) {
  	var urlbar = document.getElementById('input'); 
  	var url = urlbar.value;
  };
    
  // Make sure that the URL points to the frame of the current level
  var frameLink = document.createElement('a');
  frameLink.href = url;

  if (!url.startsWith('https://twine.ctf/ctf5.html') || !url.endsWith) {
       alert("Sorry, I can't open this URL in a frame.");
    	urlbar.value = "https://twine.ctf/ctf5.html";
        var frame = document.querySelector('iframe');
        frame.src = "static/ctf5/s.html"; 
   		//frame.contentWindow.postMessage(url, "*");
       return
  } else {
    var arg = url.replace("https://twine.ctf/ctf5.html", "");
    var frame = document.querySelector('iframe');
    frame.src = "static/ctf5/t.html" + arg; 
    //frame.contentWindow.postMessage(url, "*");
  }

};



function ctf5_updateURI(value) {
  var urlbar = document.getElementById('input');
  urlbar.value = "https://twine.ctf/ctf5.html";
}

function ctf5_levelSucceed() {
  	Harlowe.goto("CTF5_end");
}


/* # CTF 5 End */



/* # CTF 6 Start */

setup.ctf6_updateFrame = function (frameNum, url) { 
  if (!url) {
  	var urlbar = document.getElementById('input'); 
  	var url = urlbar.value;
  };
    
  // Make sure that the URL points to the frame of the current level
  var frameLink = document.createElement('a');
  frameLink.href = url;

  if (!url.startsWith('https://twine.ctf/ctf6.html') || !url.endsWith) {
       alert("Sorry, I can't open this URL in a frame.");
    	urlbar.value = "https://twine.ctf/ctf6.html";
        var frame = document.querySelector('iframe');
        frame.src = "static/ctf6/u.html"; 
       return
  } else {
    var arg = url.replace("https://twine.ctf/ctf6.html", "");
    var frame = document.querySelector('iframe');
    frame.src = "static/ctf6/u.html" + arg; 
  }

};



function ctf5_updateURI(value) {
  var urlbar = document.getElementById('input');
  urlbar.value = "https://twine.ctf/ctf6.html";
}

function ctf5_levelSucceed() {
  	Harlowe.goto("CTF5_end");
}


/* # CTF 6 End */



/* Marko API */
// Harlowe Macro Framework, by Chapel; version 1.0.2
;!function(){"use strict";var r={major:1,minor:0,patch:2},e=[r.major,r.minor,r.patch].join(".");r.semantic=e,r=Object.freeze(r);var t=$("tw-storydata"),a=Object.freeze({name:t.attr("name"),ifid:t.attr("ifid")}),n=t.attr("format-version"),o=n.split("."),i=Object.freeze({major:o[0],minor:o[1],patch:o[2],semantic:n});window.Harlowe=window.Harlowe||{},window.Harlowe=Object.assign(window.Harlowe,{framework:r,API_ACCESS:Object.freeze({MACROS:require("macros"),STATE:require("state"),CHANGER:require("datatypes/changercommand"),ENGINE:require("engine")}),engine:i,story:a})}(),function(){"use strict";function e(r){return"number"==typeof r||"boolean"==typeof r||"string"==typeof r||null===r||Array.isArray(r)&&r.every(e)||r instanceof Set&&Array.from(r).every(e)||r instanceof Map&&Array.from(r.values()).every(e)||_changer.isPrototypeOf(r)}window.Harlowe=Object.assign(window.Harlowe,{helpers:{isSerialisable:e,isSerializable:e,arrayify:function(r,e){if(r){var t=[].slice.call(r);return void 0!==e&&(t=t.slice(e)),t}},getPassageData:function(r){var e=$('tw-passagedata[name="'+r+'"]');if(e[0])return e}}})}(),function(){"use strict";var n=window.localStorage||!1,o=Harlowe.story.ifid+"-tw-storage";function r(){try{if(!n)throw new Error("storage is inaccessible");n.setItem(o,JSON.stringify({ifid:Harlowe.story.ifid}))}catch(r){console.warn(r)}}function i(r){try{var e;if(n)return e=JSON.parse(n.getItem(o)),r&&r&&"string"==typeof r?e[r]:e;throw new Error("storage is inaccessible")}catch(r){console.warn(r)}}null==i()&&r(),Harlowe.storage={clear:r,save:function(r,e){try{if(!r||"string"!=typeof r)throw new TypeError("cannot store values without a valid storage key");if(void 0===e)throw new TypeError("cannot store undefined values");var t={};if(t[r]=e,!n)throw new Error("storage is inaccessible");var a=i();Object.assign(a,t),n.setItem(o,JSON.stringify(a))}catch(r){console.warn(r)}},load:i,remove:function(r){try{if(!r||"string"!=typeof r)throw new TypeError("cannot store values without a valid storage key");if(!n)throw new Error("storage is inaccessible");var e=i();e.hasOwnProperty(r)&&(delete e[r],n.setItem(o,JSON.stringify(e)))}catch(r){console.warn(r)}}}}(),function(){"use strict";function a(r,e,t){if(!(this instanceof a))return new a(r,e,t);this.name=r||"unknown",this.args=e||[],this.data=t||{},this.type=t&&t.type||"basic",this.fn=t&&t.fn||"handler","changer"===this.type&&("handler"===this.fn?this.instance=t&&t.instance||null:this.descriptor=t&&t.descriptor||null)}a.create=function(r,e,t){if(!r||"string"!=typeof r||!r.trim())throw new TypeError("Invalid macro name.");return e&&e instanceof Array||(e=[]),t&&"object"==typeof t||(t={type:"basic",fn:"handler"}),new a(r,e,t)},Object.assign(a.prototype,{clone:function(){return a.create(this.name,this.args,this.data)},syntax:function(){return"("+this.name+":)"},error:function(r,e){var t="Error in the "+this.syntax()+" macro: "+r;return e&&alert(t),console.warn("HARLOWE CUSTOM MACRO ERROR -> ",t),new Error(r)},typeCheck:function(r){r&&r instanceof Array||(r=Harlowe.helpers.arrayify(arguments));var n=this,o=[];if(r.forEach(function(r,e){var t=e+1,a=[];"string"==typeof r&&("any"===(a=r.includes("|")?r.split("|").map(function(r){return r.trim().toLowerCase()}):[r.trim().toLowerCase()])[0]||a.some(function(r){return typeof n.args[e]===r})||o.push("argument "+t+" should be a(n) "+a.join(" or ")))}),o.length)return n.error(o.join("; "))}}),window.Harlowe=Object.assign(window.Harlowe,{MacroContext:a})}(),function(){"use strict";var c=Harlowe.API_ACCESS.MACROS,l=Harlowe.API_ACCESS.CHANGER;window.Harlowe=Object.assign(window.Harlowe||{},{macro:function(r,e,t){if(!r||"string"!=typeof r||!r.trim())throw new TypeError("Invalid macro name.");if(!e||"function"!=typeof e)throw new TypeError("Invalid macro handler.");var a,n,o,i,s;t&&"function"==typeof t?(o=r,i=e,s=t,c.addChanger(o,function(){var r=Harlowe.helpers.arrayify(arguments,1),e=l.create(o,r),t=Harlowe.MacroContext.create(o,r,{type:"changer",fn:"handler",instance:e});return i.apply(t,r),e},function(){var r=Harlowe.helpers.arrayify(arguments),e=r.shift(),t=Harlowe.MacroContext.create(o,r,{type:"changer",fn:"changer",descriptor:e});s.apply(t,r)},c.TypeSignature.zeroOrMore(c.TypeSignature.Any))):(a=r,n=e,c.add(a,function(){var r=Harlowe.helpers.arrayify(arguments,1),e=Harlowe.MacroContext.create(a,r,{type:"basic",fn:"handler"}),t=n.apply(e,r);return null==t?"":t},c.TypeSignature.zeroOrMore(c.TypeSignature.Any)))}})}(),function(){"use strict";var t=Harlowe.API_ACCESS.STATE,e=Harlowe.API_ACCESS.ENGINE;function a(){return t.passage}window.Harlowe=Object.assign(window.Harlowe||{},{passage:a,tags:function(r){r=r||a();try{var e=Harlowe.helpers.getPassageData(r).attr("tags");return e?e.split(" "):[]}catch(r){return console.warn(r.message),[]}},goto:function(r){return e.goToPassage(r)},variable:function(r,e){if("$"!==r[0])throw new Error('cannot access variable "'+r+'"');if(r=r.substr(1),void 0!==e){if(!Harlowe.helpers.isSerialisable(e))throw new Error('The value passed to variable "'+r+'" cannot be serialized.');t.variables[r]=e}return t.variables[r]},visited:function(r){return t.passageNameVisited(r||a())},hasVisited:function(r){return 0<t.passageNameVisited(r||a())},turns:function(){return t.pastLength}})}();
// end Harlowe Macro Framework


:: CTF 1 {"position":"1025,100","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

tw-story {
 background-image: url('img/ctf1/pc_rahmen1.png');
 background-size: 110%;

  /* Center and scale the image nicely */
  background-position: center;
  background-repeat: no-repeat;
}

.twine-background-login {
	position: inherit;
	background-color:  white;
	width: 500px;
}

.login-contianer{
    text-align: -webkit-center;
	height: 500px;
}

#ui-bar {
display: none;
}

br {
	max-height: 0px;
	visibility: hidden;
	display: none;
}

.headline {
    margin-top: -7rem;
    margin-bottom: 7rem;
}

</style>


<script> setup.ctf1(); </script>


<div class="headline">Your forgot your password, maybe it is possible to find it, somewhere else. </div>

<div class="container is-fluidno login-contianer">
   <form method="POST" class="box twine-background-login">
      <div class="field">
        <label class="label">Username</label>
        <div class="control">
          <input class="input" id="user" type="text" placeholder="some name">
        </div>
      </div>
      <div class="field">
        <label class="label">Password</label>
        <div class="control">
          <input class="input" id="password" type="password" placeholder="some password">
        </div>
      </div>
      <button id="ssss" class="button is-primary">Sign in</button>
    </form>
  </div>
  
  (link-repeat: "Give me a hint",(css:"padding:0px"))[(alert: "Can you find a method that will be executed when you press the button?")]
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a second hint")[(alert: "What does the JavaScript funktion atob() do?")]


:: CTF 10 {"position":"1100,725","size":"100,100"}
ctf10


:: CTF 2 {"position":"800,150","size":"100,100"}
<h3>Do I live alone? </h3>

Great! Now you know your name, but nothing else. 

After the thorough search on the book shelf with little progress, you feel helpless. You take a seat and try to calm your nervs a bit. However, a painting hanging on the wall infront of you keeps garnering your attention. There is something about it you can't put your finger on..
<style>  
img {  
max-width: 100%;  
height: auto;  
}  
</style>  
<img src= "./img/ctf2/ctf2.jpg"></img>

Maybe taking a closer look at it is not a bad idea. 

Hint: A photo is way more that a bunch of colored pixels. The details of a picture can reveal some of its secrets (look in the metadata).


:: CTF 3 {"position":"800,275","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

tw-story {
 background-image: url('img/ctf1/pc_rahmen1.png');
 background-size: 110%;

  /* Center and scale the image nicely */
  background-position: center;
  background-repeat: no-repeat;
}
</style>

<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">

(set: _whatToDo to "You should train taking a closer look at things...")

<!--(if: $onTimeShow is false)
(if: $onTimeShow is true)[ (alert: _info)]
(if: $onTimeShow is true)[ (set: $onTimeShow to false)]-->

[(alert: _whatToDo)]

<title>Challenge</title>
</head>
<body>
<h1>Capture the Flag</h1>
<p>Capture the Flag (CTF) in computer security is an exercise in which "flags" are secretly hidden in purposefully-vulnerable programs or websites. It can either be for competitive or educational purposes. Competitors steal flags either from other competitors (attack/defense-style CTFs) or from the organizers (jeopardy-style challenges). Several variations exist. Competitions can including hiding flags in hardware devices, they can be both online or in-person, and can be advanced or entry-level. The game is based on the traditional outdoor sport of the same name.</p>
<br>
<p> Source: Wikipedia </p>
<!--flag{12_234_ghuzt5r}-->
</body>
</html>


:: CTF 4 {"position":"1375,0","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

br {
	max-height: 0px;
	visibility: hidden;
	display: none;
}

tw-story {
 background-image: url('img/4all/pc_rahmen.png');
 background-size: 110%;
 background-position-x: -6.5rem;
 background-repeat: no-repeat;
  
 margin: 0;
 padding: 1rem;
 white-space: normal;
 width: 100%
}


tw-passage {
 width: 83rem;
 height: 60rem;
 margin:auto;
 padding: 1.5rem;
 font-family: Arial, Helvetica, sans-serif;
 font-size:1.2rem; color:#000;
 text-align: left;
}

.webbrowser {
  max-width: 1rem;
  min-width: fit-content;
  border: 2px solid black;
  margin: auto;
  background: white;
  margin-top: -4.5rem;
}

#tab {
    background: url(img/ctf4/webbrowser_header.PNG) 0 0 no-repeat;
    margin: 0px;
    width: 55rem;
    height: 30rem;
    border: 1px solid #333;
}

.url {
	padding: 0.1em;
    align-self: center;
}

.controls {
    margin: 0 auto;
    background-color: #f4f4f4;
    border: 1px solid #f0f0f0;
    padding: 2px 3px;
    border: 1px solid #999;
    border-bottom: none;
    display: -webkit-flex;
    margin-top: 47px;
    padding: 2px;
}

.urlbutton {
    margin-left: auto;
    align-self: center;
    padding-right: 1em;
}

.input {
    margin-right: auto;
}


iframe {
 width: inherit;
 height: inherit
}
</style>


(set: _info to "Cross-Site Scripting (XSS) is a type of client-side injection attack where a malicious script is injected into a legitimate website and executed. XSS attacks can occur when an attacker try to uses a web application to send malicious code, usually in the form of a browser-side script, to another end user. 

Vulnerabilities that enable these attacks are widespread and occur wherever a web application ''uses input from a user within the output it generates without validating or encoding it.''


In this challenge you can try to insert a JavaScript alert() in the frame below. This  JavaScript alert() should show up a  pop up window.

For this CTF please imagine there is vulnerable Webseite on the Webserver (https://twine.ctf)
It is not necessary to look into the the code.
")

<!--(if: $onTimeShow is false)
(if: $onTimeShow is true)[ (alert: _info)]
(if: $onTimeShow is true)[ (set: $onTimeShow to false)]-->

(if: $ctfs contains "ctf4")[]
(else:)[(alert: _info)]

(link-repeat: "What should I do?")[(alert: _info)]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>

<div class="webbrowser"> 
	<div id="tab">
		<div class="controls">
            <span class="url label">URL:</span>
            <input id="input" class="urlbar input" type="text" value="https://twine.ctf/ctf4.html">
            <input id="surfbutton" class="button is-success urlbutton" type="Submit" onclick="setup.ctf4_updateFrame()" value="Surf">
           </div>
            <iframe src="static/ctf4/s.html" title="Google"></iframe>
    </div>

</div>
<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a hint",(css:"padding:0px"))[(alert: "You need to insert some javascript, maybe the script tag helps")]
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a second hint")[(alert: "It is possible to pop an alert with javascript \"alert()\", you should only add some script-tags")]

(Set: _solution to "<#script> alert(\"XSS\");</script>")

(if: $debug is true)[solution is: (click: "solution")[_solution]]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>


:: CTF4_end {"position":"1500,0","size":"100,100"}
(set: $ctfs to it + (a: "ctf4"))

You made it!

Story

[[Main Page->MainPage]]


:: CTF 5 {"position":"1375,125","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

br {
	max-height: 0px;
	visibility: hidden;
	display: none;
}

tw-story {
 background-image: url('img/4all/pc_rahmen.png');
 background-size: 110%;
 background-position-x: -6.5rem;
 background-repeat: no-repeat;
  
 margin: 0;
 padding: 1rem;
 white-space: normal;
 width: 100%
}


tw-passage {
 width: 83rem;
 height: 60rem;
 margin:auto;
 padding: 1.5rem;
 font-family: Arial, Helvetica, sans-serif;
 font-size:1.2rem; color:#000;
 text-align: left;
}

.webbrowser {
  max-width: 1rem;
  min-width: fit-content;
  border: 2px solid black;
  margin: auto;
  background: white;
  margin-top: -4.5rem;
}

#tab {
    background: url(img/ctf5/webbrowser_header.PNG) 0 0 no-repeat;
    margin: 0px;
    width: 55rem;
    height: 30rem;
    border: 1px solid #333;
}

.url {
	padding: 0.1em;
    align-self: center;
}

.controls {
    margin: 0 auto;
    background-color: #f4f4f4;
    border: 1px solid #f0f0f0;
    padding: 2px 3px;
    border: 1px solid #999;
    border-bottom: none;
    display: -webkit-flex;
    margin-top: 47px;
    padding: 2px;
}

.urlbutton {
    margin-left: auto;
    align-self: center;
    padding-right: 1em;
}

.input {
    margin-right: auto;
}


iframe {
 width: inherit;
 height: inherit
}
</style>


(set: _info to "This time, you should also insert an alert(). Use a special script tag to archive it. It is not necessary to look into the the code.")

<!--(if: $onTimeShow is false)
(if: $onTimeShow is true)[ (alert: _info)]
(if: $onTimeShow is true)[ (set: $onTimeShow to false)]-->

(if: $ctfs contains "ctf5")[]
(else:)[(alert: _info)]

(link-repeat: "What should I do?")[(alert: _info)]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>

<div class="webbrowser"> 
	<div id="tab">
		<div class="controls">
            <span class="url label">URL:</span>
            <input id="input" class="urlbar input" type="text" value="https://twine.ctf/ctf5.html">
            <input id="surfbutton" class="button is-success urlbutton" type="Submit" onclick="setup.ctf5_updateFrame()" value="Surf">
           </div>
            <iframe src="static/ctf5/t.html" title="Google"></iframe>
    </div>

</div>
<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a hint",(css:"padding:0px"))[(alert: "Maybe there are other html tags that are vulnerable?")]
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a second hint")[(alert: "Think of an image tag, could you insert same javascript here (onerror= and src=)")]

(Set: _solution to "<#script> src='#' onerror=alert(1) </script>")

(if: $debug is true)[solution is: (click: "solution")[_solution]]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>


:: CTF5_end {"position":"1500,125","size":"100,100"}
(set: $ctfs to it + (a: "ctf5"))

You made it!

[[Main Page->MainPage]]


:: CTF 6 {"position":"1375,250","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

br {
	max-height: 0px;
	visibility: hidden;
	display: none;
}

tw-story {
 background-image: url('img/4all/pc_rahmen.png');
 background-size: 110%;
 background-position-x: -6.5rem;
 background-repeat: no-repeat;
  
 margin: 0;
 padding: 1rem;
 white-space: normal;
 width: 100%
}


tw-passage {
 width: 83rem;
 height: 60rem;
 margin:auto;
 padding: 1.5rem;
 font-family: Arial, Helvetica, sans-serif;
 font-size:1.2rem; color:#000;
 text-align: left;
}

.webbrowser {
  max-width: 1rem;
  min-width: fit-content;
  border: 2px solid black;
  margin: auto;
  background: white;
  margin-top: -4.5rem;
}

#tab {
    background: url(img/ctf6/webbrowser_header.PNG) 0 0 no-repeat;
    margin: 0px;
    width: 55rem;
    height: 30rem;
    border: 1px solid #333;
}

.url {
	padding: 0.1em;
    align-self: center;
}

.controls {
    margin: 0 auto;
    background-color: #f4f4f4;
    border: 1px solid #f0f0f0;
    padding: 2px 3px;
    border: 1px solid #999;
    border-bottom: none;
    display: -webkit-flex;
    margin-top: 47px;
    padding: 2px;
}

.urlbutton {
    margin-left: auto;
    align-self: center;
    padding-right: 1em;
}

.input {
    margin-right: auto;
}


iframe {
 width: inherit;
 height: inherit
}
</style>


(set: _info to "")

<!--(if: $onTimeShow is false)
(if: $onTimeShow is true)[ (alert: _info)]
(if: $onTimeShow is true)[ (set: $onTimeShow to false)]-->

(if: $ctfs contains "ctf5")[]
(else:)[(alert: _info)]

(link-repeat: "What should I do?")[(alert: _info)]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">

<div class="webbrowser"> 
	<div id="tab">
		<div class="controls">
            <span class="url label">URL:</span>
            <input id="input" class="urlbar input" type="text" value="https://twine.ctf/ctf6.html">
            <input id="surfbutton" class="button is-success urlbutton" type="Submit" onclick="setup.ctf6_updateFrame()" value="Surf">
           </div>
            <iframe src="static/ctf6/u.html" title="Google"></iframe>
    </div>

</div>
<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a hint",(css:"padding:0px"))[(alert: "xxx")]
<tw-consecutive-br></tw-consecutive-br>
(link-repeat: "Give me a second hint")[(alert: "xxx")]

(Set: _solution to "<#script> src='#' onerror=alert(1) </script>")

(if: $debug is true)[solution is: (click: "solution")[_solution]]

<tw-consecutive-br></tw-consecutive-br>
<tw-consecutive-br></tw-consecutive-br>


:: CTF 7 {"position":"1375,425","size":"100,100"}
<h1> What is my name?</h1>

<body>
<img src= "https://i0.hippopx.com/photos/440/457/108/books-shelf-school-library-preview.jpg">
(enchant: ?Passage, (text-color: white) + (background: black))
A memory is like a picture that is made of multiple puzzle pieces. The pieces are lost and scattered all over the place. 
Let's start in the living room. Here, there is a bookshelf that houses many memories. This is defenetly a good place to start

[[First Shelf]] 

[[Second Shelf]]

[[Third Shelf]]

[[Fourth Shelf]]

[[Fifth Shelf]]

<!--My first name ist: John -->

Although this seems like an obvios place for where a memory trigger can be found, appearently this is not the case. 
Further inspection may be required...
Enter memory trigger: ---
</body>



<link rel="stylesheet" href=css/ctf7/styles.css></link>


:: First Shelf {"position":"1275,600","size":"100,100"}
Nothing really usefull here


:: Second Shelf {"position":"1400,600","size":"100,100"}
No usefull information here..


:: Third Shelf {"position":"1525,600","size":"100,100"}
Nothing here either..


:: Fourth Shelf {"position":"1650,600","size":"100,100"}
This search has lead me nowhere sofar..


:: Fifth Shelf {"position":"1775,600","size":"100,100"}
yup.. I did all of that for nothing :(


:: CTF 8 {"position":"950,550","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
<style>

tw-story {
 background-size: 110%;

  /* Center and scale the image nicely */
  background-position: center;
  background-repeat: no-repeat;
}

.login-contianer{
    text-align: -webkit-center;
	height: 500px;
}

</style>

<button class="button is-primary">Download</button>

<a href="static/ctf8/important_note.txt" download="note">
  <img src="static/ctf8/important_note.txt" alt="note">
</a>

<button type="submit" onclick="window.open('static/ctf8/important_note.txt')">Download!</button>


:: CTF 9 {"position":"950,675","size":"100,100"}
On your computer you finde an interesting file. It seems that it hiding a secret. And your task is to retreive it.
<html>
<head>
<style>
div {
  border: 2px solid gray;
  padding: 100px;
}
</style>
</head>

<body>
<div>
<code>
public class ctf9 {<br>
    static char [] theSecret;<br>
    public static void encryptSecret(){<br>
        theSecret = new char [14]; <br>
        theSecret [3] = 'n'; <br>
        theSecret [4] = 'o'; <br>
        theSecret [0] = 'B'; <br>
        theSecret [7] = 'l'; <br>
        theSecret [2] = 'u'; <br>
        theSecret [8] = 'l'; <br>
        theSecret [10] = 'd'; <br>
        theSecret [12] = 'e'; <br>
        theSecret [13] = 'r'; <br>
        theSecret [11] = 'H'; <br>
        theSecret [1] = 'r'; <br>
        theSecret [9] = 'e'; <br>
        theSecret [5] = 'K'; <br>
        theSecret [6] = 'i'; <br>
    }<br>
     public static String conclusion(){<br>
        String conc = "This case is unsolvable. Give up!";<br>
        return  conc;<br>
    }<br>
    public static void main(String[] args) {<br>
      System.out.println(conclusion());<br>
    }<br>
}
</code>
</div>
</body>
</html>
Hint: kommt noch


:: MainPage {"position":"200,25","size":"100,100"}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">

<style>

#first{
background-color: var(--purple) !important;
}

</style>

Hello, Welcome to our litte CTF Challenge Game. In this game you will learn something about same basic CTF Challenges.  Capture the Flag (CTF) is a cybersecurity competition that is used as a test of security skills. 
...
Olea schreib mal was schönes
[[Start Story->Story]]
[[CTFs->CTFs]]

Hello World

Debug Mode with all solutions is: $debug 
(Set: $debug to true)
<!--(Set: $debug to false)-->

<!-- :: init [startup] -->
<!-- it is always a good idea to initialize your variables, but with arrays it is particularly important -->
(set: $ctfs to (a:)) 


<!--Comment Text
<button id="first" class="button is-rounded">Rounded</button>
<button class="button is-primary is-rounded">Rounded</button>
<button class="button is-link is-rounded">Rounded</button>
<button class="button is-info is-rounded">Rounded</button>
<button class="button is-success is-rounded">Rounded</button>
<button class="button is-danger is-rounded">Rounded</button>
-->

Overview of all challanges with explanations:
[[CTF 1->CTF 1]]
[[CTF 2->CTF 2]]
[[CTF 3->CTF 3]]
[[CTF 4->CTF 4]]
[[CTF 5->CTF 5]]
[[CTF 6->CTF 6]]
[[CTF 7->CTF 7]]
[[CTF 8->CTF 8]]
[[CTF 9->CTF 9]]
[[CTF 10->CTF 10]]

So soll das, CSS ist der King!
[[<button id="first" class="button is-danger is-rounded">Start Challenge 1</button> ->CTF 1]]


:: Story {"position":"175,350","size":"100,100"}
Hier beginnt die Story!

Main Start


:: Story1 {"position":"150,500","size":"100,100"}


:: Story2 {"position":"350,575","size":"100,100"}
[[CTF 3->CTF 3]]


:: CTFs {"position":"325,275","size":"100,100"}
List with all CTFs and its status

<!--(set: $ctfs to it + (a:"ctf1"))
(set: $ctfs to it + (a:"ctf2"))
(set: $ctfs to it + (a:"ctf3"))-->



(if: $ctfs's length is 0)[\
    no ctf finished 
](else:)[\
    <!-- we iterate over the array and print each item -->\
    (for: each _item, ...$ctfs)[\
        _item (unless: $ctfs's last is _item)[, ]\
    ].
]


